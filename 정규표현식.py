"""
숫자 1글자가 있는가 : [0123456789] 또는 [0-9] 또는 \d
알페벳 1글자가 있는가 : [a-z]  [A-Z]  [a-zA-Z]
16진수 [0-9a-fA-F]
문자열 시작을 지정 : ^
문자열의 끝을 지정 : $

반복횟 수지정

"""

import re

val ="01097315256abc"

#pattern ="01[016789][1-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
#pattern ="01[016789][1-9][0-9]\d\d\d\d\d\d\d\d\d\d\d"
pattern =r"^01[016789][1-9][0-9]\d{6,7}$" #전화번호를 표현하는 정규식 #raw
"""
3번째 숫자는 06789 중에 하나가 나올 수 있고 그다음 숫자는
0을 제외한 숫자가 올 수 있고
마지막은 0~9까지 올수 있는데 \d{6,7} 6개 또는 7개가 올 수있다. 여기서 \d는 앞에꺼 반복을 의미
"""

if(re.match(pattern, val)):
    print("matched")
else:
    print("invalid")




"""
(?P) : 특자 문자열 속에서 정규표현식을 적용하겠다 시작
\d+ : \d+ 패턴에 부합한다면
<x> : x라는 변수명으로 인자를 넘기겠다.

(?P<x>\d+) -> 뷰의 인자로 넘겨받은 값들은 모두 문자열 타입입니다.
"""



numners ="1231/12312/3123/13/32/3/21/3/"
arr = numners.split("/")
map(int ,arr)
print(sum(map(lambda s: int(s or 0) ,arr)))




"""
#dojo/hello/한글이름/나이
url(r'^hello/(?P<name>[ㄱ-힣]+)/(?P<age>\d+)/$', views.hello)
"""
